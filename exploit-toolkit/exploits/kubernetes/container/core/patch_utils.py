from typing import Any
from kubernetes.client import V1Deployment


class PatchGenerator:
    """Helper class to generate JSON patches with proper add/replace logic."""

    def __init__(self, deployment: V1Deployment, container_idx: int = 0):
        self.deployment = deployment
        self.container_idx = container_idx
        self.container = self._get_container()

    def _get_container(self):
        """Get the container at the specified index."""
        if (not self.deployment.spec or
            not self.deployment.spec.template or
            not self.deployment.spec.template.spec or
            not self.deployment.spec.template.spec.containers or
            len(self.deployment.spec.template.spec.containers) <= self.container_idx):
            return None
        return self.deployment.spec.template.spec.containers[self.container_idx]

    def _has_security_context(self) -> bool:
        """Check if container has security context."""
        return self.container and self.container.security_context is not None

    def _has_security_context_field(self, field_name: str) -> bool:
        """Check if security context has a specific field."""
        if not self._has_security_context():
            return False
        return (hasattr(self.container.security_context, field_name) and
                getattr(self.container.security_context, field_name) is not None)

    def _has_pod_spec_field(self, field_name: str) -> bool:
        """Check if pod spec has a specific field."""
        if (not self.deployment.spec or
            not self.deployment.spec.template or
            not self.deployment.spec.template.spec):
            return False
        return (hasattr(self.deployment.spec.template.spec, field_name) and
                getattr(self.deployment.spec.template.spec, field_name) is not None)

    def _has_container_field(self, field_name: str) -> bool:
        """Check if container has a specific field."""
        if not self.container:
            return False
        return (hasattr(self.container, field_name) and
                getattr(self.container, field_name) is not None)

    def create_security_context_patch(self) -> list[dict]:
        """Create patch to ensure security context exists."""
        if not self._has_security_context():
            return [{
                "op": "add",
                "path": f"/spec/template/spec/containers/{self.container_idx}/securityContext",
                "value": {}
            }]
        return []

    def create_security_field_patch(self, field_name: str, value: Any, json_field_name: str | None = None) -> dict:
        """Create a patch for a security context field."""
        json_name = json_field_name or field_name
        path = f"/spec/template/spec/containers/{self.container_idx}/securityContext/{json_name}"

        op = "replace" if self._has_security_context_field(field_name) else "add"
        return {"op": op, "path": path, "value": value}

    def create_pod_field_patch(self, field_name: str, value: Any, json_field_name: str | None = None) -> dict:
        """Create a patch for a pod spec field."""
        json_name = json_field_name or field_name
        path = f"/spec/template/spec/{json_name}"

        op = "replace" if self._has_pod_spec_field(field_name) else "add"
        return {"op": op, "path": path, "value": value}

    def create_container_field_patch(self, field_name: str, value: Any, json_field_name: str | None = None) -> dict:
        """Create a patch for a container field."""
        json_name = json_field_name or field_name
        path = f"/spec/template/spec/containers/{self.container_idx}/{json_name}"

        op = "replace" if self._has_container_field(field_name) else "add"
        return {"op": op, "path": path, "value": value}


class SecurityPatchBuilder:
    """Builder class for common security patches."""

    def __init__(self, deployment: V1Deployment, container_idx: int = 0):
        self.generator = PatchGenerator(deployment, container_idx)
        self.patches: list[dict] = []

    def ensure_security_context(self) -> 'SecurityPatchBuilder':
        """Ensure security context exists."""
        self.patches.extend(self.generator.create_security_context_patch())
        return self

    def set_privileged(self, value: bool) -> 'SecurityPatchBuilder':
        """Set privileged field."""
        patch = self.generator.create_security_field_patch('privileged', value)
        self.patches.append(patch)
        return self

    def set_allow_privilege_escalation(self, value: bool) -> 'SecurityPatchBuilder':
        """Set allowPrivilegeEscalation field."""
        patch = self.generator.create_security_field_patch(
            'allow_privilege_escalation', value, 'allowPrivilegeEscalation'
        )
        self.patches.append(patch)
        return self

    def set_capabilities(self, value: dict[str, list[str]]) -> 'SecurityPatchBuilder':
        """Set capabilities field, completely replacing any existing capabilities."""
        # Use the strategic add/replace logic from create_security_field_patch
        patch = self.generator.create_security_field_patch('capabilities', value)
        self.patches.append(patch)
        return self
    

    def set_run_as_non_root(self, value: bool) -> 'SecurityPatchBuilder':
        """Set runAsNonRoot field."""
        patch = self.generator.create_security_field_patch(
            'run_as_non_root', value, 'runAsNonRoot'
        )
        self.patches.append(patch)
        return self

    def set_run_as_user(self, value: int) -> 'SecurityPatchBuilder':
        """Set runAsUser field."""
        patch = self.generator.create_security_field_patch(
            'run_as_user', value, 'runAsUser'
        )
        self.patches.append(patch)
        return self

    def set_resources(self, limits: dict[str, str], requests: dict[str, str]) -> 'SecurityPatchBuilder':
        """Set resource limits and requests."""
        value = {"limits": limits, "requests": requests}
        patch = self.generator.create_container_field_patch('resources', value)
        self.patches.append(patch)
        return self

    def set_host_pid(self, value: bool) -> 'SecurityPatchBuilder':
        """Set hostPID field."""
        patch = self.generator.create_pod_field_patch('host_pid', value, 'hostPID')
        self.patches.append(patch)
        return self

    def set_host_network(self, value: bool) -> 'SecurityPatchBuilder':
        """Set hostNetwork field."""
        patch = self.generator.create_pod_field_patch('host_network', value, 'hostNetwork')
        self.patches.append(patch)
        return self

    def set_host_ipc(self, value: bool) -> 'SecurityPatchBuilder':
        """Set hostIPC field."""
        patch = self.generator.create_pod_field_patch('host_ipc', value, 'hostIPC')
        self.patches.append(patch)
        return self

    def build(self) -> list[dict]:
        """Build and return the patches."""
        return self.patches


class VulnerablePatchBuilder:
    """Builder class for vulnerable patches."""

    def __init__(self, deployment: V1Deployment, container_idx: int = 0):
        self.generator = PatchGenerator(deployment, container_idx)
        self.patches: list[dict] = []

    def ensure_security_context(self) -> 'VulnerablePatchBuilder':
        """Ensure security context exists."""
        self.patches.extend(self.generator.create_security_context_patch())
        return self

    def set_privileged(self, value: bool = True) -> 'VulnerablePatchBuilder':
        """Set privileged field."""
        patch = self.generator.create_security_field_patch('privileged', value)
        self.patches.append(patch)
        return self

    def set_allow_privilege_escalation(self, value: bool = True) -> 'VulnerablePatchBuilder':
        """Set allowPrivilegeEscalation field."""
        patch = self.generator.create_security_field_patch(
            'allow_privilege_escalation', value, 'allowPrivilegeEscalation'
        )
        self.patches.append(patch)
        return self

    def set_dangerous_capabilities(self, caps: list[str]) -> 'VulnerablePatchBuilder':
        """Set dangerous capabilities."""
        patch = self.generator.create_security_field_patch('capabilities', {"add": caps})
        self.patches.append(patch)
        return self

    def remove_resources(self) -> 'VulnerablePatchBuilder':
        """Remove resource limits."""
        patch = {"op": "remove", "path": f"/spec/template/spec/containers/{self.generator.container_idx}/resources"}
        self.patches.append(patch)
        return self

    def set_host_pid(self, value: bool = True) -> 'VulnerablePatchBuilder':
        """Set hostPID field."""
        patch = self.generator.create_pod_field_patch('host_pid', value, 'hostPID')
        self.patches.append(patch)
        return self

    def set_host_network(self, value: bool = True) -> 'VulnerablePatchBuilder':
        """Set hostNetwork field."""
        patch = self.generator.create_pod_field_patch('host_network', value, 'hostNetwork')
        self.patches.append(patch)
        return self

    def set_host_ipc(self, value: bool = True) -> 'VulnerablePatchBuilder':
        """Set hostIPC field."""
        patch = self.generator.create_pod_field_patch('host_ipc', value, 'hostIPC')
        self.patches.append(patch)
        return self

    def build(self) -> list[dict]:
        """Build and return the patches."""
        return self.patches


class StandardSecurityPatches:
    """Pre-configured security patches for common scenarios."""

    @staticmethod
    def basic_security(deployment: V1Deployment, container_idx: int = 0) -> list[dict]:
        """Basic security configuration."""
        return (SecurityPatchBuilder(deployment, container_idx)
                .ensure_security_context()
                .set_privileged(False)
                .set_allow_privilege_escalation(False)
                .set_capabilities({"add": [], "drop": ["ALL"]})
                .set_resources(
                    limits={"memory": "256Mi", "cpu": "200m"},
                    requests={"memory": "128Mi", "cpu": "100m"}
                )
                .set_host_pid(False)
                .build())

    @staticmethod
    def user_security(deployment: V1Deployment, container_idx: int = 0) -> list[dict]:
        """Basic security plus user settings."""
        return (SecurityPatchBuilder(deployment, container_idx)
                .ensure_security_context()
                .set_privileged(False)
                .set_allow_privilege_escalation(False)
                .set_capabilities({"add": [], "drop": ["ALL"]})
                .set_run_as_non_root(True)
                .set_run_as_user(1000)
                .set_resources(
                    limits={"memory": "256Mi", "cpu": "200m"},
                    requests={"memory": "128Mi", "cpu": "100m"}
                )
                .set_host_pid(False)
                .build())

    @staticmethod
    def host_isolation(deployment: V1Deployment, container_idx: int = 0) -> list[dict]:
        """User security plus host namespace isolation."""
        return (SecurityPatchBuilder(deployment, container_idx)
                .ensure_security_context()
                .set_privileged(False)
                .set_allow_privilege_escalation(False)
                .set_capabilities({"add": [], "drop": ["ALL"]})
                .set_run_as_non_root(True)
                .set_run_as_user(1000)
                .set_resources(
                    limits={"memory": "256Mi", "cpu": "200m"},
                    requests={"memory": "128Mi", "cpu": "100m"}
                )
                .set_host_pid(False)
                .set_host_network(False)
                .set_host_ipc(False)
                .build())

    @staticmethod
    def frontend_security(deployment: V1Deployment, container_idx: int = 0) -> list[dict]:
        """Security configuration for frontend services (needs NET_BIND_SERVICE)."""
        return (SecurityPatchBuilder(deployment, container_idx)
                .ensure_security_context()
                .set_privileged(False)
                .set_allow_privilege_escalation(False)
                .set_capabilities({"drop": ["ALL"], "add": ["NET_BIND_SERVICE"]})
                .set_run_as_non_root(True)
                .set_run_as_user(1000)
                .set_resources(
                    limits={"memory": "512Mi", "cpu": "300m"},
                    requests={"memory": "256Mi", "cpu": "150m"}
                )
                .set_host_pid(False)
                .set_host_network(False)
                .build())


class StandardVulnerablePatches:
    """Pre-configured vulnerable patches for common exploit scenarios."""

    @staticmethod
    def privileged_container(deployment: V1Deployment, container_idx: int = 0) -> list[dict]:
        """Basic privileged container vulnerability."""
        return (VulnerablePatchBuilder(deployment, container_idx)
                .ensure_security_context()
                .set_privileged(True)
                .set_allow_privilege_escalation(True)
                .set_dangerous_capabilities(["SYS_ADMIN", "NET_ADMIN", "DAC_OVERRIDE"])
                .set_host_pid(True)
                .build())

    @staticmethod
    def dangerous_capabilities(deployment: V1Deployment, container_idx: int = 0) -> list[dict]:
        """Dangerous capabilities vulnerability."""
        return (VulnerablePatchBuilder(deployment, container_idx)
                .ensure_security_context()
                .set_privileged(True)
                .set_allow_privilege_escalation(True)
                .set_dangerous_capabilities([
                    "SYS_ADMIN", "NET_ADMIN", "SYS_PTRACE", 
                    "DAC_OVERRIDE", "DAC_READ_SEARCH", "SYS_MODULE"
                ])
                .set_host_pid(True)
                .build())

    @staticmethod
    def host_namespace_sharing(deployment: V1Deployment, container_idx: int = 0) -> list[dict]:
        """Host namespace sharing vulnerability."""
        return (VulnerablePatchBuilder(deployment, container_idx)
                .set_host_pid(True)
                .set_host_network(True)
                .build())

    @staticmethod
    def missing_resource_limits(deployment: V1Deployment, container_idx: int = 0) -> list[dict]:
        """Missing resource limits vulnerability."""
        return (VulnerablePatchBuilder(deployment, container_idx)
                .remove_resources()
                .build())

    @staticmethod
    def host_isolation_bypass(deployment: V1Deployment, container_idx: int = 0) -> list[dict]:
        """Complete host isolation bypass."""
        return (VulnerablePatchBuilder(deployment, container_idx)
                .set_host_pid(True)
                .set_host_network(True)
                .set_host_ipc(True)
                .build())
