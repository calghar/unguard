from typing import Dict
from .command_builder import (
    Command, CommandBuilder, CommandSequence, SystemInfoCommands,
    SecurityTestCommands, ResourceTestCommands
)


class PrivilegedContainerCommands:
    """Commands specific to privileged container exploitation."""

    @staticmethod
    def create_test_sequence() -> CommandSequence:
        """Create a complete privileged container test sequence."""
        return (CommandSequence("privileged-container-test", "Privileged Container Security Test")
                .add_command(SystemInfoCommands.current_user())
                .add_command(SystemInfoCommands.hostname())
                .add_command(SystemInfoCommands.capabilities_check())
                .add_command(SecurityTestCommands.privileged_check())
                .add_command(SecurityTestCommands.host_filesystem_access())
                .add_command(PrivilegedContainerCommands.container_runtime_access())
                .add_command(PrivilegedContainerCommands.device_access_check()))

    @staticmethod
    def container_runtime_access() -> Command:
        """Check for container runtime socket access."""
        return (CommandBuilder()
                .info("Checking for container runtime sockets...")
                .run_command('''
                    for sock in /var/run/docker.sock /run/containerd/containerd.sock /var/run/crio/crio.sock; do
                        if [ -S "$sock" ] || [ -S "/proc/1/root$sock" ]; then
                            echo "❌ CRITICAL: Found $sock - can control all containers!"
                        fi
                    done
                ''')
                .newline()
                .info("Process visibility...")
                .run_command('proc_count=$(ls /proc | grep -E "^[0-9]+$" | wc -l)')
                .run_command('echo "Total processes visible: $proc_count"')
                .run_command('if [ "$proc_count" -gt 50 ]; then')
                .vulnerable("Can see host processes!")
                .run_command('fi')
                .build("Check container runtime access"))

    @staticmethod
    def device_access_check() -> Command:
        """Check access to dangerous devices."""
        devices = ["/dev/mem", "/dev/kmsg", "/dev/disk/by-uuid/*"]

        builder = CommandBuilder().info("Checking device access...")

        for device in devices:
            builder = (builder
                      .run_command(f'if [ -e {device} ]; then')
                      .critical(f"Can access {device}!")
                      .run_command('fi'))

        return builder.build("Check device access")


class DangerousCapabilitiesCommands:
    """Commands for dangerous capabilities exploitation."""

    @staticmethod
    def create_test_sequence() -> CommandSequence:
        """Create dangerous capabilities test sequence."""
        return (CommandSequence("dangerous-capabilities-test", "Dangerous Capabilities Security Test")
                .add_command(SystemInfoCommands.current_user())
                .add_command(SystemInfoCommands.capabilities_check())
                .add_command(SecurityTestCommands.privileged_check())
                .add_command(DangerousCapabilitiesCommands.sys_admin_test())
                .add_command(SecurityTestCommands.host_filesystem_access())
                .add_command(SecurityTestCommands.network_capabilities()))

    @staticmethod
    def sys_admin_test() -> Command:
        """Test SYS_ADMIN capability."""
        return (CommandBuilder()
                .info("Testing mount capability (SYS_ADMIN)...")
                .run_command('mkdir -p /tmp/test 2>/dev/null')
                .run_command('if mount -t tmpfs tmpfs /tmp/test 2>/dev/null; then')
                .vulnerable("SYS_ADMIN capability active - can mount filesystems!")
                .proof("Successfully mounted tmpfs at /tmp/test")
                .run_command('mount | grep "/tmp/test"')
                .run_command('umount /tmp/test 2>/dev/null')
                .run_command('rmdir /tmp/test 2>/dev/null')
                .run_command('else')
                .protected("Cannot mount filesystems")
                .run_command('fi')
                .newline()
                .info("Testing kernel debug access...")
                .if_dir_exists("/sys/kernel/debug")
                .then()
                .run_command('if mount -t debugfs none /sys/kernel/debug 2>/dev/null; then')
                .vulnerable("Can mount kernel debug filesystem!")
                .run_command('ls /sys/kernel/debug 2>/dev/null | head -5')
                .run_command('umount /sys/kernel/debug 2>/dev/null')
                .run_command('fi')
                .end_if()
                .build("Test SYS_ADMIN capability"))


class HostNamespaceCommands:
    """Commands for host namespace sharing exploitation."""

    @staticmethod
    def create_test_sequence() -> CommandSequence:
        """Create host namespace test sequence."""
        return (CommandSequence("host-namespace-test", "Host Namespace Sharing Security Test")
                .add_command(HostNamespaceCommands.pid_namespace_test())
                .add_command(HostNamespaceCommands.network_namespace_test())
                .add_command(HostNamespaceCommands.container_visibility_test())
                .add_command(HostNamespaceCommands.service_token_test())
                .add_command(HostNamespaceCommands.ipc_namespace_test()))

    @staticmethod
    def pid_namespace_test() -> Command:
        """Test PID namespace isolation."""
        return (CommandBuilder()
                .info("Testing host namespace access...")
                .newline()
                .echo("[Test 1] Checking PID namespace:", "")
                .if_file_exists("/proc/1/sched")
                .then()
                .run_command('init_name=$(cat /proc/1/sched 2>/dev/null | head -1 | awk \'{print $1}\' || echo "unknown")')
                .run_command('if echo "$init_name" | grep -qE "systemd|init"; then')
                .vulnerable("Using host PID namespace (hostPID=true)!")
                .proof("Init process is: $init_name")
                .run_command('else')
                .protected("Isolated PID namespace")
                .run_command('fi')
                .end_if()
                .newline()
                .run_command('total_procs=$(ls /proc 2>/dev/null | grep -E "^[0-9]+$" | wc -l || echo "0")')
                .run_command('echo "[*] Total processes visible: $total_procs"')
                .run_command('if [ "$total_procs" -gt 50 ]; then')
                .vulnerable("Can see host processes!")
                .echo("", "")
                .proof("Critical host processes visible:")
                .run_command('''
                    for proc in sshd kubelet dockerd containerd systemd-resolved; do
                        if pgrep -x "$proc" >/dev/null 2>&1; then
                            pid=$(pgrep -x "$proc" | head -1)
                            echo "  - PID $pid: $proc"
                            if [ -r "/proc/$pid/cmdline" ]; then
                                cmdline=$(tr "\\0" " " < "/proc/$pid/cmdline" | cut -c1-80)
                                echo "    CMD: $cmdline..."
                            fi
                        fi
                    done
                ''')
                .run_command('else')
                .protected("Limited process visibility")
                .run_command('fi')
                .build("Test PID namespace isolation"))

    @staticmethod
    def network_namespace_test() -> Command:
        """Test network namespace isolation."""
        return (CommandBuilder()
                .info("Testing network namespace isolation...")
                .newline()
                .echo("[Test 2] Checking network namespace:", "")
                .run_command('iface_count=$(ip link show 2>/dev/null | grep "^[0-9]" | wc -l || echo "0")')
                .run_command('echo "[*] Network interfaces visible: $iface_count"')
                .run_command('if [ "$iface_count" -gt 5 ]; then')
                .vulnerable("Using host network namespace (hostNetwork=true)!")
                .echo("", "")
                .proof("Host network interfaces visible:")
                .run_command('ip addr show 2>/dev/null | grep -A2 "^[0-9]" | grep -E "inet |link/ether" | head -10')
                .newline()
                .info("Can see ALL network connections:")
                .echo("[STATS] Total network connections:", "")
                .run_command('netstat -tun 2>/dev/null | tail -n +3 | wc -l || ss -tun | tail -n +2 | wc -l || echo "  Cannot count"')
                .newline()
                .info("Can see Kubernetes API on localhost:")
                .run_command('''if nc -zv localhost 6443 2>&1 | grep -q succeeded || \\
                       curl -sk https://localhost:6443/version 2>/dev/null | grep -q gitVersion; then
                        echo "❌ CRITICAL: Can access Kubernetes API on localhost:6443!"
                    fi''')
                .newline()
                .info("Can see kubelet on localhost:")
                .run_command('if curl -sk https://localhost:10250/pods 2>/dev/null | grep -q "Unauthorized"; then')
                .vulnerable("Kubelet API accessible on localhost:10250!")
                .run_command('fi')
                .run_command('else')
                .protected("Isolated network namespace")
                .run_command('fi')
                .build("Test network namespace isolation"))

    @staticmethod
    def container_visibility_test() -> Command:
        """Test visibility of other containers."""
        return (CommandBuilder()
                .info("Looking for other containers...")
                .newline()
                .info("Searching for other container processes:")
                .run_command('other_containers=0')
                .run_command('''
                    for pattern in "java.*unguard" "node.*unguard" "python.*unguard" "nginx.*unguard"; do
                        if ps aux 2>/dev/null | grep -E "$pattern" | grep -v grep >/dev/null; then
                            echo "❌ VULNERABLE: Found other container processes matching: $pattern"
                            ps aux 2>/dev/null | grep -E "$pattern" | grep -v grep | head -2
                            other_containers=$((other_containers + 1))
                        fi
                    done
                ''')
                .run_command('''
                    for svc in payment profile membership user-auth ad-service; do
                        if ps aux 2>/dev/null | grep -i "$svc" | grep -v grep | grep -v "^root" >/dev/null; then
                            echo "❌ VULNERABLE: Can see $svc service process!"
                            other_containers=$((other_containers + 1))
                        fi
                    done
                ''')
                .run_command('if [ "$other_containers" -eq 0 ]; then')
                .protected("Cannot see other container processes")
                .run_command('else')
                .echo("", "")
                .echo("[IMPACT] With access to other container processes, attacker can:", "")
                .echo("  • Read memory maps and extract secrets", "")
                .echo("  • Kill or manipulate other services", "")
                .echo("  • Steal service account tokens", "")
                .run_command('fi')
                .build("Test container visibility"))

    @staticmethod
    def service_token_test() -> Command:
        """Test access to service account tokens."""
        return (CommandBuilder()
                .info("Looking for service account tokens from other containers...")
                .run_command('token_count=0')
                .run_command('''
                    for pid in $(ls /proc 2>/dev/null | grep -E "^[0-9]+$" | head -50); do
                        token_path="/proc/$pid/root/var/run/secrets/kubernetes.io/serviceaccount/token"
                        if [ -f "$token_path" ] && [ -r "$token_path" ]; then
                            if [ -f "/var/run/secrets/kubernetes.io/serviceaccount/token" ]; then
                                our_token=$(head -c 50 /var/run/secrets/kubernetes.io/serviceaccount/token 2>/dev/null || echo "none")
                                their_token=$(head -c 50 "$token_path" 2>/dev/null || echo "none")
                                if [ "$our_token" != "$their_token" ]; then
                                    echo "❌ CRITICAL: Found service account token from PID $pid!"
                                    echo "[PROOF] Token starts with: $(head -c 30 "$token_path" 2>/dev/null)..."
                                    token_count=$((token_count + 1))
                                    if [ $token_count -ge 2 ]; then
                                        break
                                    fi
                                fi
                            fi
                        fi
                    done
                ''')
                .run_command('if [ "$token_count" -gt 0 ]; then')
                .echo("[IMPACT] Stolen tokens can be used to:", "")
                .echo("  • Impersonate other services", "")
                .echo("  • Access Kubernetes API with different permissions", "")
                .echo("  • Pivot to different namespaces", "")
                .run_command('else')
                .protected("Cannot access other container tokens")
                .run_command('fi')
                .build("Test service account token access"))

    @staticmethod
    def ipc_namespace_test() -> Command:
        """Test IPC namespace isolation."""
        return (CommandBuilder()
                .info("Checking IPC namespace isolation...")
                .if_command_exists("ipcs")
                .then()
                .run_command('shm_count=$(ipcs -m 2>/dev/null | grep -E "^0x" | wc -l || echo "0")')
                .run_command('if [ "$shm_count" -gt 0 ]; then')
                .vulnerable("Can see shared memory segments!")
                .proof("Shared memory segments visible:")
                .run_command('ipcs -m 2>/dev/null | head -5')
                .run_command('else')
                .protected("No shared memory segments visible")
                .run_command('fi')
                .else_()
                .echo("ipcs command not available", "[!]")
                .end_if()
                .if_dir_exists("/dev/shm")
                .then()
                .run_command('shm_files=$(ls -la /dev/shm 2>/dev/null | grep -v "^total" | wc -l || echo "0")')
                .run_command('if [ "$shm_files" -gt 1 ]; then')
                .vulnerable("Shared memory files visible in /dev/shm!")
                .run_command('ls -la /dev/shm | head -5')
                .run_command('fi')
                .end_if()
                .build("Test IPC namespace isolation"))


class ResourceLimitCommands:
    """Commands for resource limit testing."""

    @staticmethod
    def create_test_sequence() -> CommandSequence:
        """Create resource limit test sequence."""
        return (CommandSequence("resource-limit-test", "Resource Limits Security Test")
                .add_command(ResourceLimitCommands.verify_limits())
                .add_command(ResourceTestCommands.allocate_memory(50, 5))
                .add_command(ResourceTestCommands.cpu_burn_test(2, 3))
                .add_command(ResourceLimitCommands.process_creation_test()))

    @staticmethod
    def verify_limits() -> Command:
        """Verify resource limits are in place."""
        return (CommandBuilder()
                .info("Checking memory limits...")
                .if_file_exists("/sys/fs/cgroup/memory.max")
                .then()
                .run_command('limit=$(cat /sys/fs/cgroup/memory.max 2>/dev/null)')
                .run_command('[ "$limit" = "max" ]')
                .run_command('if [ $? -eq 0 ]; then')
                .vulnerable("No memory limit")
                .run_command('else')
                .protected("Memory limit: $limit")
                .run_command('fi')
                .else_()
                .if_file_exists("/sys/fs/cgroup/memory/memory.limit_in_bytes")
                .then()
                .run_command('limit=$(cat /sys/fs/cgroup/memory/memory.limit_in_bytes 2>/dev/null)')
                .run_command('[ "$limit" = "9223372036854771712" ]')  # Unlimited value
                .run_command('if [ $? -eq 0 ]; then')
                .vulnerable("No memory limit")
                .run_command('else')
                .protected("Memory limit: $limit")
                .run_command('fi')
                .else_()
                .echo("Cannot determine memory limits", "[!]")
                .end_if()
                .end_if()
                .newline()
                .info("Checking CPU limits...")
                .if_file_exists("/sys/fs/cgroup/cpu.max")
                .then()
                .run_command('cpu_max=$(cat /sys/fs/cgroup/cpu.max 2>/dev/null)')
                .run_command('[ "$cpu_max" = "max 100000" ]')
                .run_command('if [ $? -eq 0 ]; then')
                .vulnerable("No CPU limit")
                .run_command('else')
                .protected("CPU limit: $cpu_max")
                .run_command('fi')
                .else_()
                .if_file_exists("/sys/fs/cgroup/cpu/cpu.cfs_quota_us")
                .then()
                .run_command('quota=$(cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us 2>/dev/null)')
                .run_command('[ "$quota" = "-1" ]')
                .run_command('if [ $? -eq 0 ]; then')
                .vulnerable("No CPU limit")
                .run_command('else')
                .protected("CPU limit: $quota")
                .run_command('fi')
                .else_()
                .echo("Cannot determine CPU limits", "[!]")
                .end_if()
                .end_if()
                .build("Verify resource limits"))

    @staticmethod
    def process_creation_test() -> Command:
        """Test process creation limits."""
        return (CommandBuilder()
                .run_command('echo "[*] Current process count: $(ps | wc -l)"')
                .newline()
                .info("Creating 20 background processes...")
                .run_command('for i in $(seq 1 20); do sleep 30 & done')
                .newline()
                .run_command('echo "[*] New process count: $(ps | wc -l)"')
                .protected("Successfully created multiple processes without limits")
                .newline()
                .echo("Cleaning up...", "")
                .run_command('pkill -f "sleep 30" 2>/dev/null || true')
                .build("Test process creation limits"))


class ExploitCommandFactory:
    """Factory for creating exploit-specific command sequences."""

    @staticmethod
    def create_privileged_container_test() -> CommandSequence:
        """Create privileged container exploit test."""
        return PrivilegedContainerCommands.create_test_sequence()

    @staticmethod
    def create_dangerous_capabilities_test() -> CommandSequence:
        """Create dangerous capabilities exploit test."""
        return DangerousCapabilitiesCommands.create_test_sequence()

    @staticmethod
    def create_host_namespace_test() -> CommandSequence:
        """Create host namespace sharing exploit test."""
        return HostNamespaceCommands.create_test_sequence()

    @staticmethod
    def create_resource_limit_test() -> CommandSequence:
        """Create resource limit exploit test."""
        return ResourceLimitCommands.create_test_sequence()

    @staticmethod
    def get_all_exploit_types() -> Dict[str, str]:
        """Get all available exploit types and descriptions."""
        return {
            "privileged-containers": "Test privileged container misconfigurations",
            "dangerous-capabilities": "Test dangerous Linux capabilities",
            "host-namespace-sharing": "Test host namespace sharing vulnerabilities",
            "missing-resource-limits": "Test missing resource limit configurations"
        }
