"""Security utility functions for Kubernetes container security assessment."""

from typing import List, Tuple
from rich.table import Table
from kubernetes.client import V1Deployment, V1PodSecurityContext, V1SecurityContext

from .logger import SecurityLogger, console
from .k8s_client import K8sClient


def check_privileged_container(container) -> bool:
    """Check if container is running in privileged mode."""
    return (container.security_context and 
            container.security_context.privileged)


def check_dangerous_capabilities(container) -> bool:
    """Check if container has dangerous capabilities."""
    return (container.security_context and
            container.security_context.capabilities and
            container.security_context.capabilities.add and
            len(container.security_context.capabilities.add) > 0)


def check_host_namespace_access(pod) -> bool:
    """Check if pod has host namespace access."""
    return pod.spec.host_pid or pod.spec.host_network or pod.spec.host_ipc


def check_resource_limits(container) -> bool:
    """Check if container has no resource limits."""
    return not container.resources or not container.resources.limits


def analyze_pod_security(pod) -> List[str]:
    """Analyze pod security and return list of issues."""
    issues = []
    container = pod.spec.containers[0]
    
    if check_privileged_container(container):
        issues.append("Privileged")
    
    if check_dangerous_capabilities(container):
        issues.append("Dangerous capabilities")
    
    if check_host_namespace_access(pod):
        issues.append("Host namespace access")
    
    if check_resource_limits(container):
        issues.append("No resource limits")
    
    return issues


def get_service_issues(deployment: V1Deployment) -> List[str]:
    """Get security issues for a deployment."""
    issues = []

    pod_spec = deployment.spec.template.spec
    container = pod_spec.containers[0]

    # Check privileged
    if (
        container.security_context
        and isinstance(container.security_context, V1SecurityContext)
        and container.security_context.privileged
    ):
        issues.append("Privileged")

    # Check capabilities
    if (
        container.security_context
        and container.security_context.capabilities
        and container.security_context.capabilities.add
        and len(container.security_context.capabilities.add) > 0
    ):
        issues.append("Dangerous Caps")

    # Check host access
    if pod_spec.host_pid or pod_spec.host_network or pod_spec.host_ipc:
        issues.append("Host Access")

    # Check resource limits
    if not container.resources or not container.resources.limits:
        issues.append("No Limits")

    return issues


def verify_service_security(service: str, k8s: K8sClient) -> Tuple[str, str, bool]:
    """Verify security for a single service."""
    pod_name = k8s.find_pod_for_service(service)
    if not pod_name:
        return (service, "No pod found", False)
    
    try:
        pod = k8s.v1.read_namespaced_pod(pod_name, k8s.namespace)
        issues = analyze_pod_security(pod)
        
        if issues:
            return (service, ", ".join(issues), False)
        else:
            return (service, "Secure", True)
    
    except Exception as e:
        return (service, f"Error: {e}", False)


def display_verification_results(results: List[Tuple[str, str, bool]], logger: SecurityLogger):
    """Display verification results in a table and summary."""
    table = Table(title="Security Verification Results")
    table.add_column("Service", style="cyan")
    table.add_column("Status", style="white")
    table.add_column("Secure", style="white")
    
    all_secure = True
    for service, status, secure in results:
        if not secure:
            all_secure = False
        table.add_row(
            service,
            status,
            "‚úÖ" if secure else "‚ùå"
        )
    
    console.print(table)
    
    if all_secure:
        logger.secure("All security verifications passed! üéâ")
        console.print("\nThe containers are now properly secured with:")
        console.print("  ‚Ä¢ Non-privileged execution")
        console.print("  ‚Ä¢ Dropped capabilities")
        console.print("  ‚Ä¢ Resource limits")
        console.print("  ‚Ä¢ Host isolation")
        console.print("  ‚Ä¢ Disabled privilege escalation")
    else:
        logger.warning("Some security issues remain. Please review the output above.")


def _get_container_name(pod) -> str:
    """Get container name from pod."""
    return pod.spec.containers[0].name if pod.spec.containers else None

def _check_capabilities(pod_name: str, container_name: str, k8s: K8sClient) -> None:
    """Check and display container capabilities."""
    caps = k8s.exec_in_pod(
        pod_name, "cat /proc/1/status | grep ^Cap", container=container_name
    )
    if not caps:
        return
        
    console.print("  Capabilities:")
    for line in caps.strip().split("\n"):
        console.print(f"    {line}")

    _check_dangerous_capabilities(caps)

def _check_dangerous_capabilities(caps: str) -> None:
    """Check for dangerous capabilities in capability string."""
    if "CapEff:" not in caps:
        return
        
    cap_line = [line for line in caps.split("\n") if "CapEff:" in line][0]
    cap_value = cap_line.split()[1]
    if cap_value != "0000000000000000":
        console.print("    ‚ö†Ô∏è  Non-zero effective capabilities detected")

def _check_host_access(pod) -> None:
    """Check and display host namespace access."""
    if not (pod.spec.host_pid or pod.spec.host_network):
        return
        
    console.print("  ‚ö†Ô∏è  Host namespace access:")
    if pod.spec.host_pid:
        console.print("    - hostPID: true")
    if pod.spec.host_network:
        console.print("    - hostNetwork: true")

def assess_runtime_state(pod_name: str, k8s: K8sClient) -> None:
    """Assess runtime state of a pod."""
    console.print("Runtime State:")

    try:
        pod = k8s.v1.read_namespaced_pod(pod_name, k8s.namespace)
        container_name = _get_container_name(pod)

        if not container_name:
            console.print("  ‚ö†Ô∏è  No container found in the pod")
            return

        # Get actual user
        user_info = k8s.exec_in_pod(
            pod_name, "id", container=container_name
        ).strip()
        console.print(f"  Running as: {user_info}")

        _check_capabilities(pod_name, container_name, k8s)
        _check_host_access(pod)

    except Exception as e:
        console.print(f"  Error checking runtime state: {e}")


def print_security_context(sec_context, indent: int = 0) -> None:
    """Display security context."""
    prefix = " " * indent

    if isinstance(sec_context, V1PodSecurityContext):
        attrs = [
            ("runAsUser", sec_context.run_as_user),
            ("runAsNonRoot", sec_context.run_as_non_root),
        ]
    elif isinstance(sec_context, V1SecurityContext):
        attrs = [
            ("runAsUser", sec_context.run_as_user),
            ("runAsNonRoot", sec_context.run_as_non_root),
            ("privileged", sec_context.privileged),
            ("allowPrivilegeEscalation", sec_context.allow_privilege_escalation),
            ("readOnlyRootFilesystem", sec_context.read_only_root_filesystem),
        ]
        if sec_context.capabilities:
            console.print(f"{prefix}capabilities:")
            if sec_context.capabilities.add:
                console.print(f"{prefix}  add: {sec_context.capabilities.add}")
            if sec_context.capabilities.drop:
                console.print(f"{prefix}  drop: {sec_context.capabilities.drop}")
    else:
        console.print(f"{prefix}Unknown security context type")
        return

    for name, value in attrs:
        if value is not None:
            console.print(f"{prefix}{name}: {value}")


def _print_resource_dict(resource_dict, resource_type: str, prefix: str) -> None:
    """Print resource dictionary (limits or requests)."""
    console.print(f"{prefix}{resource_type}:")
    
    if hasattr(resource_dict, "get"):
        _print_dict_style_resources(resource_dict, prefix)
    else:
        _print_object_style_resources(resource_dict, prefix)

def _print_dict_style_resources(resource_dict, prefix: str) -> None:
    """Print resources that are dictionary-like."""
    if resource_dict.get("memory"):
        console.print(f"{prefix}  memory: {resource_dict['memory']}")
    if resource_dict.get("cpu"):
        console.print(f"{prefix}  cpu: {resource_dict['cpu']}")

def _print_object_style_resources(resource_obj, prefix: str) -> None:
    """Print resources that are object-like."""
    if hasattr(resource_obj, "memory") and resource_obj.memory:
        console.print(f"{prefix}  memory: {resource_obj.memory}")
    if hasattr(resource_obj, "cpu") and resource_obj.cpu:
        console.print(f"{prefix}  cpu: {resource_obj.cpu}")

def print_resources(resources, logger: SecurityLogger, indent: int = 0) -> None:
    """Display resource configuration."""
    prefix = " " * indent

    if not resources:
        console.print(f"{prefix}‚ùå No resource configuration available")
        return

    logger.debug(f"Resources structure: {resources}")

    if resources.limits:
        _print_resource_dict(resources.limits, "limits", prefix)

    if resources.requests:
        _print_resource_dict(resources.requests, "requests", prefix)


def display_security_status_table(results: List[Tuple[str, List[str], bool]]) -> None:
    """Display security status results in a table format."""
    table = Table(title="Security Status")
    table.add_column("Service", style="cyan")
    table.add_column("Status", style="white")

    for service, issues, secure in results:
        status = "‚úÖ " + ", ".join(issues) if secure else "‚ö†Ô∏è  " + ", ".join(issues)
        table.add_row(service, status)

    console.print(table)