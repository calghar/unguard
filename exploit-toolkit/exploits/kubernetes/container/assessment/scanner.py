from typing import List
from ..core.logger import SecurityLogger, console
from ..core.k8s_client import K8sClient
from ..core.security_utils import (
    assess_runtime_state,
    print_resources,
    print_security_context,
    get_service_issues,
    display_security_status_table,
)


class SecurityScanner:
    """Scanner for assessing security posture of Kubernetes deployments."""

    def __init__(self, k8s_client: K8sClient, logger: SecurityLogger):
        self.k8s = k8s_client
        self.logger = logger

    def assess_service(self, service: str) -> List[str]:
        """Assess security posture of a single service."""
        console.print(f"\n[green]--- {service} ---[/green]")

        # Check if deployment exists
        deployment = self.k8s.get_deployment(service)
        if not deployment:
            self.logger.warning(f"Deployment {service} not found")
            return []

        # Extract security contexts
        pod_spec = deployment.spec.template.spec  # type: ignore[attr-defined]
        container = pod_spec.containers[0]

        # Pod Security Context
        console.print("Pod Security Context:")
        if not pod_spec.security_context:
            console.print("  ⚠️  No pod security context defined")
        else:
            print_security_context(pod_spec.security_context, indent=2)

        # Container Security Context
        console.print("Container Security Context:")
        if not container.security_context:
            console.print("  ⚠️  No container security context defined")
        else:
            print_security_context(container.security_context, indent=2)

        # Resource Limits
        console.print("Resource Configuration:")
        if not container.resources or not container.resources.limits:
            console.print("  ❌ No resource limits set")
        else:
            print_resources(container.resources, self.logger, indent=2)

        # Check runtime state
        pod_name = self.k8s.find_pod_for_service(service)
        if pod_name:
            assess_runtime_state(pod_name, self.k8s)
        else:
            console.print("Runtime State: ❌ No running pod found")

        return get_service_issues(deployment)

    def assess_all_services(self, services: List[str]) -> None:
        """Assess all services."""
        self.logger.info("Assessing container security posture...")
        console.print("\n[bold]=== Security Context Analysis ===[/bold]")

        for service in services:
            self.assess_service(service)

        console.print("\n💡 [bold]Security Recommendations:[/bold]")
        console.print("  • All containers should have explicit security contexts")
        console.print("  • Use runAsNonRoot: true and specify runAsUser")
        console.print("  • Drop all capabilities and add only what's needed")
        console.print("  • Set resource requests and limits")
        console.print("  • Avoid host namespace sharing unless absolutely necessary")

    def quick_security_check(self, services: List[str]) -> None:
        """Quick security check for all services."""
        results = []

        for service in services:
            deployment = self.k8s.get_deployment(service)
            if not deployment:
                results.append((service, ["Not found"], False))
                continue

            issues = get_service_issues(deployment)

            if not issues:
                results.append((service, ["Secure"], True))
            else:
                results.append((service, issues, False))

        display_security_status_table(results)




