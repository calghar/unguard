from typing import Dict, List

from .base import BaseExploit, ExploitResult
from ..core.patch_utils import StandardVulnerablePatches
from ..core.exploit_commands import ExploitCommandFactory

class MissingResourceLimitsExploit(BaseExploit):
    """Exploit for missing resource limits misconfiguration."""

    name = "Missing Resource Limits"
    risk_level = "MEDIUM-HIGH"
    vulnerability_type = "missing-resource-limits"
    description = """This exploit demonstrates how missing resource limits can:

                    - Enable denial-of-service attacks
                    - Cause node instability
                    - Impact other workloads
                    - Lead to cascading failures
                    - Result in excessive cloud costs

                    Without proper limits, a single container can consume
                    all available CPU and memory on a node, affecting all
                    other workloads and potentially crashing the node.

                    NOTE: This demonstration shows the POTENTIAL for resource exhaustion
                    without actually performing it, to maintain cluster stability."""

    def get_default_service(self) -> str:
        return "unguard-membership-service"

    def get_vulnerable_patch(self) -> List[Dict]:
        deployment = self.k8s.get_deployment(self.service)
        if not deployment:
            return []

        return StandardVulnerablePatches.missing_resource_limits(deployment, container_idx=0)

    def get_secure_patch(self) -> List[Dict]:
        return self.build_secure_patch_with_extra_fields(
            container_idx=0,
            include_user_settings=True,
            include_host_settings=False
        )

    def check_vulnerability(self) -> bool:
        """Check if service has resource limits."""
        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return False

        try:
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)
            container = pod.spec.containers[0]  # type: ignore[attr-defined]

            # Check for missing resource limits
            if not container.resources or not container.resources.limits:
                return True

            return False
        except Exception:
            return False

    def demonstrate(self) -> ExploitResult:
        """Demonstrate resource consumption without limits using the new command system."""
        self.logger.exploit("Demonstrating missing resource limits vulnerability...")

        # Create and execute the test sequence
        test_sequence = ExploitCommandFactory.create_resource_limit_test()
        result = self.execute_command_sequence(test_sequence)

        if result.success:
            # Print the output for interactive use
            if hasattr(self, '_last_command_output'):
                print(self._last_command_output)

            # Get node capacity information
            try:
                pod_name = self.k8s.find_pod_for_service(self.service)
                if pod_name:
                    pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)
                    node_name = pod.spec.node_name  # type: ignore[attr-defined]
                    node = self.k8s.v1.read_node(node_name)

                    cpu_capacity = node.status.capacity.get("cpu", "unknown")  # type: ignore[attr-defined]
                    memory_bytes = node.status.capacity.get("memory", "0Ki")  # type: ignore[attr-defined]

                    # Convert memory to GB
                    if memory_bytes.endswith("Ki"):
                        memory_gb = int(memory_bytes[:-2]) / (1024 * 1024)
                    else:
                        memory_gb = 0

                    print(f"\n[*] Node: {node_name}")
                    print(f"[*] Total capacity: {cpu_capacity} CPUs, {memory_gb:.1f}GB memory")
                    print("[*] This container could consume ALL of these resources!")

                    if result.evidence:
                        result.evidence.append(f"Access to {cpu_capacity} CPUs and {memory_gb:.1f}GB memory on node")
                    else:
                        result.evidence = [f"Access to {cpu_capacity} CPUs and {memory_gb:.1f}GB memory on node"]
            except Exception as e:
                self.logger.error(f"Node capacity check failed: {e}")

            # Summary
            self.logger.exploit("\n=== Summary ===")
            print("Without resource limits:")
            print("  ✓ Allocated 50MB memory freely")
            print("  ✓ Consumed 2 CPU cores freely")
            print("  ✓ Created 20 processes freely")
            print("  ✓ No restrictions on resource usage")
            print("\nRisk: Any container can exhaust node resources causing:")
            print("  - Pod evictions")
            print("  - Service outages")
            print("  - Increased cloud costs")

        return result
