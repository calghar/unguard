from .base import BaseExploit, ExploitResult
from ..core.patch_utils import StandardVulnerablePatches
from ..core.exploit_commands import ExploitCommandFactory

class PrivilegedContainersExploit(BaseExploit):
    """Exploit for privileged container misconfiguration."""

    name = "Privileged Container"
    risk_level = "CRITICAL"
    vulnerability_type = "privileged-containers"
    description = """This exploit demonstrates how privileged containers can:
                    - Access ALL host devices and filesystems
                    - Load kernel modules
                    - Modify system settings
                    - Escape to the host system
                    - Access physical memory
                    - Control other containers

                In privileged mode, the container has nearly all the
                capabilities of the host system, making isolation meaningless."""

    def get_default_service(self) -> str:
        return "unguard-payment-service"

    def get_vulnerable_patch(self) -> list[dict]:
        deployment = self.k8s.get_deployment(self.service)
        if not deployment:
            return []

        return StandardVulnerablePatches.privileged_container(deployment, container_idx=0)

    def get_secure_patch(self) -> list[dict]:
        return self.build_secure_patch(container_idx=0)

    def check_vulnerability(self) -> bool:
        """Check if service is running in privileged mode."""
        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return False

        try:
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)
            container = pod.spec.containers[0]  # type: ignore[attr-defined]

            if container.security_context and container.security_context.privileged:
                return True

            if pod.spec.host_pid:  # type: ignore[attr-defined]
                return True

            return False

        except Exception:
            return False

    def demonstrate(self) -> ExploitResult:
        """Demonstrate privileged container exploit using the new command system."""
        self.logger.exploit("Demonstrating privileged container risks...")

        test_sequence = ExploitCommandFactory.create_privileged_container_test()
        result = self.execute_command_sequence(test_sequence)

        summary_impact = [
            "Escape to the host system",
            "Access all host filesystems",
            "Read/write kernel memory via /dev/mem",
            "Load malicious kernel modules",
            "Access all containers on the host",
            "Modify cgroups and resource limits",
            "Persist on the host system",
            "Completely compromise the node",
        ]

        self._add_impact_summary(result, summary_impact)
        return result
