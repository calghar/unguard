from typing import Dict, List

from .base import BaseExploit, ExploitResult
from ..core.patch_utils import StandardSecurityPatches
from ..core.exploit_commands import ExploitCommandFactory


class HostNamespaceSharingExploit(BaseExploit):
    """Exploit for host namespace sharing misconfiguration."""

    name = "Host Namespace Sharing"
    risk_level = "CRITICAL"
    vulnerability_type = "host-namespace-sharing"
    description = """This exploit demonstrates the risks of sharing host namespaces:

                - hostPID: Access to ALL host processes
                - hostNetwork: Access to host network interfaces
                - hostIPC: Access to host IPC resources

                With host namespace access, container isolation is severely
                compromised, enabling:
                - Lateral movement across containers
                - Access to sensitive process information
                - Network traffic interception
                - Secrets exposure from other containers"""

    def get_default_service(self) -> str:
        return "unguard-frontend"

    def get_vulnerable_patch(self) -> List[Dict]:
        from ..core.patch_utils import StandardVulnerablePatches

        deployment = self.k8s.get_deployment(self.service)
        if not deployment:
            return []

        return StandardVulnerablePatches.host_namespace_sharing(deployment, container_idx=0)

    def get_secure_patch(self) -> List[Dict]:
        deployment = self.k8s.get_deployment(self.service)
        if not deployment:
            return []

        return StandardSecurityPatches.frontend_security(deployment, container_idx=0)

    def check_vulnerability(self) -> bool:
        """Check if service has host namespace access."""
        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return False

        try:
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)

            # Check host namespace settings
            if pod.spec.host_pid or pod.spec.host_network or pod.spec.host_ipc:
                return True

            return False

        except Exception:
            return False

    def demonstrate(self) -> ExploitResult:
        """Demonstrate host namespace access risks using the new command system."""
        self.logger.exploit("Demonstrating host namespace access risks...")

        # Create and execute the test sequence
        test_sequence = ExploitCommandFactory.create_host_namespace_test()
        result = self.execute_command_sequence(test_sequence)

        if result.success:
            # Print the output for interactive use
            if hasattr(self, '_last_command_output'):
                print(self._last_command_output)

            # Add summary impact
            summary_impact = [
                "View and kill ANY process on the host (hostPID)",
                "Access network traffic from all containers (hostNetwork)",
                "Steal credentials from other containers",
                "Perform lateral movement across the node",
                "Access local services (kubelet, docker, etc.)",
                "Intercept inter-pod communications",
                "Potentially escape to the host system",
            ]

            self.logger.exploit("=== Impact Summary ===")
            for item in summary_impact:
                print(f"  â€¢ {item}")

            # Extend the result with summary impact
            if result.impact:
                result.impact.extend(summary_impact)
            else:
                result.impact = summary_impact

        return result
