from .base import BaseExploit, ExploitResult
from ..core.exploit_commands import ExploitCommandFactory
from ..core.patch_utils import StandardVulnerablePatches

class DangerousCapabilitiesExploit(BaseExploit):
    """Exploit for dangerous Linux capabilities misconfiguration."""

    name = "Dangerous Capabilities"
    risk_level = "CRITICAL"
    vulnerability_type = "dangerous-capabilities"
    description = """This exploit demonstrates how containers with dangerous capabilities can:
                    - Completely escape container isolation
                    - Access host filesystem and kernel features
                    - Manipulate network configuration
                    - Load kernel modules
                    - Bypass security restrictions

                    The profile service is configured with ALL Linux capabilities (000001ffffffffff),
                    making it FULLY PRIVILEGED with complete access to the host system."""

    def get_default_service(self) -> str:
        return "unguard-profile-service"

    def get_vulnerable_patch(self) -> list[dict]:
        deployment = self.k8s.get_deployment(self.service)
        if not deployment:
            return []

        return StandardVulnerablePatches.dangerous_capabilities(deployment, container_idx=0)

    def get_secure_patch(self) -> list[dict]:
        return self.build_secure_patch_with_extra_fields(
            container_idx=0,
            include_user_settings=True,
            include_host_settings=True
        )

    def check_vulnerability(self) -> bool:
        """Check if service has dangerous capabilities."""
        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return False

        try:
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)
            container = pod.spec.containers[0]  # type: ignore[attr-defined]

            # Check for privileged
            if container.security_context and container.security_context.privileged:
                return True

            # Check for dangerous capabilities
            if (
                container.security_context
                and container.security_context.capabilities
                and container.security_context.capabilities.add
            ):
                for cap in container.security_context.capabilities.add:
                    if cap in self.DANGEROUS_CAPABILITIES:
                        return True

            return False

        except Exception:
            return False

    def demonstrate(self) -> ExploitResult:
        """Demonstrate dangerous capabilities exploit using the new command system."""
        self.logger.exploit(
            "Demonstrating privileged container escape with dangerous capabilities..."
        )

        test_sequence = ExploitCommandFactory.create_dangerous_capabilities_test()
        result = self.execute_command_sequence(test_sequence)

        summary_impact = [
            "Completely escape the container",
            "Access ANY file on the host",
            "Read host memory and kernel data",
            "Control all other containers on the node",
            "Load kernel modules (rootkits)",
            "Persist on the host system",
            "Pivot to the entire cluster",
        ]

        self._add_impact_summary(result, summary_impact)
        return result
